@function getRandomContrastCompliant($backgroundColor, $contrastRatioMinimum: $default-contrast-minimum, $contrastRatioMaximum: $default-contrast-maximum) {
  $randomRgbColor: randomRgb();
  $randomRgbContrast: contrast($backgroundColor, $randomRgbColor);
  $isTooLow: $randomRgbContrast < $contrastRatioMinimum;
  $isTooHigh: $randomRgbContrast > $contrastRatioMaximum;
  $isValidContrast: $isTooLow and $isTooHigh;
  
  @while ($isTooLow or $isTooHigh) {
    $randomRgbColor: randomRgb();
    $randomRgbContrast: contrast($backgroundColor, $randomRgbColor);
    $isTooLow: $randomRgbContrast < $contrastRatioMinimum;
    $isTooHigh: $randomRgbContrast > $contrastRatioMaximum;
    $isValidContrast: $isTooLow and $isTooHigh;
  }

  @return $randomRgbColor;
}

/**
 * Calculate the luminance for a color.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
 @function luminance($color) {
  $red: nth($linear-channel-values, red($color) + 1);
  $green: nth($linear-channel-values, green($color) + 1);
  $blue: nth($linear-channel-values, blue($color) + 1);

  @return .2126 * $red + .7152 * $green + .0722 * $blue;
}

/**
 * Calculate the contrast ratio between two colors.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
 @function contrast($back, $front) {
  $backLum: luminance($back) + .05;
  $foreLum: luminance($front) + .05;

  @return max($backLum, $foreLum) / min($backLum, $foreLum);
}

@function randomRgb() {
  @return rgb(random(255), random(255), random(255));
}
